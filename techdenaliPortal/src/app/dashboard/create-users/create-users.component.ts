import { Component } from '@angular/core';
import { UserService } from '../../services/user.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { User } from '../../models/user';

@Component({
  selector: 'app-create-users',
  templateUrl: './create-users.component.html',
  styleUrl: './create-users.component.scss'
})
export class CreateUsersComponent {
  constructor(private router:Router, private http:HttpClient,private formBuilder:FormBuilder, private userService:UserService,
        private toastr: ToastrService 
    ){}
  register!:FormGroup;
  showPassword: boolean = false;
  showPasswordcfm: boolean = false;
  autoGeneratedPassword: string = '';
  showChoosePasswordButton: boolean = false;

  ngOnInit(): void {
  
    this.register = this.formBuilder.group({
      userName: ['', Validators.required],
      email: ['',Validators.required],
      password: ['', [Validators.required, Validators.pattern(/^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/)]],
      confirmPassword: ['',Validators.required],
      privilege: ['viewer'],
    },
    {
      validator: this.checkPasswords
    });
  }

  generateStrongPassword() {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[{]}|;:,<.>?';
    let strongPassword = '';
    
    for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        strongPassword += charset[randomIndex];
    }    this.register.get('confirmPassword')!.setValue(strongPassword);
    this.register.get('password')!.setValue(strongPassword);
    this.autoGeneratedPassword = strongPassword;
    this.showPasswordcfm = false;
    this.showPassword=false;
    this.showChoosePasswordButton = true;
  }

  chooseYourOwnPassword() {
    this.showPasswordcfm = false;
    this.showChoosePasswordButton = false;
    this.register.get('confirmPassword')!.setValue('');
    this.register.get('password')!.setValue('');
  }

  checkPasswords(group: FormGroup) {
    const password = group.get('password')?.value;
    const confirmPassword = group.get('confirmPassword')?.value;

    return password === confirmPassword ? null : { notSame: true };
  }
  
  registerdata() {
    const formData = this.register.value;

    this.userService.registerUser(formData)
        .subscribe({
            next: (response) => {
                console.log('Registration successful:' + response, response);
                this.toastr.success(response, 'Success', {
                    positionClass: 'toast-bottom-center',
                    closeButton: true
                });
                
                this.register.reset()
            },
            error: (error) => {
                console.error('Registration failed:', error);
                this.toastr.error(error.error, 'Error', {
                    positionClass: 'toast-bottom-center',
                    closeButton: true
                });
               
            }
        });
  }

  togglePasswordVisibility(field: string) {
    if (field === 'password') {
        this.showPassword = !this.showPassword;
    } else if (field === 'confirmPassword') {
        this.showPasswordcfm = !this.showPasswordcfm;
    }
}  
}
